def set_target_dic(df_path_1, df_path_2):
  df_1 = pd.read_csv(df_path_1)
  df_2 = pd.read_csv(df_path_2)
  data_target_1 = df_1.iloc[:,1]
  data_target_2 = df_2.iloc[:,1]
  unique_targets_1 = list(set(data_target_1))
  unique_targets_2 = list(set(data_target_2))
  unique_targets = set(unique_targets_1+ unique_targets_2)
  target_dic = {}
  for n, target in enumerate(unique_targets):
    target_dic[target] = n
  return target_dic

def fifteen_mer(peptide):
  length = len(peptide)
  if length == 15:
    pass
  else:
    padding = 15 - length
    if padding % 2 == 0:
      left_pad, right_pad = int(padding//2), int(padding//2)
      peptide = "X"*left_pad + peptide + "X"*right_pad
    else:
      left_pad, right_pad = int(padding/2), int(padding/2) + 1
      peptide = "X"*left_pad + peptide + "X"*right_pad
  return peptide

def BLOSUM62(peptide):
  encoding = {"A":[4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0, 0],
              "R":[-1, 5, 0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, 0],
              "N":[-2,  0 , 6 , 1 ,-3 , 0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0,  -4, -2, -3, 0 ],
              "D":[-2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1,  -4, -3, -3, 0],
              "C":[0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, 0],
              "Q":[-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2, 0],
              "E":[-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2, 0],
              "G":[0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3, 0],
              "H":[-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3, 0],
              "I":[-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3, 0],
              "L":[-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1, 0],
              "K":[-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2, 0],
              "M":[-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1, 0],
              "F":[-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1, 0],
              "P":[-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2, 0],
              "S":[1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2, 0],
              "T":[0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0, 0],
              "W":[-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3, 0],
              "Y":[-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1, 0],
              "V":[0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4, 0],
              "X":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]}
  peptide_encode = []
  for amino_acid in peptide:
    peptide_encode.append(encoding[amino_acid])
  return peptide_encode
